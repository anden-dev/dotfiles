#!/usr/bin/env zsh

zmodload zsh/zprof

# HOME/bin first then homebrew, other later
export PATH="$HOME/bin:$PATH";
export PATH="/opt/homebrew/bin:$PATH"

export EDITOR='vim'
export VEDITOR='code'
export VISUAL=$EDITOR
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export DOTFILES="$HOME/.dotfiles"

export VF_TF_VERSION_DIR="$HOME/.terraform.versions"
export PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"
export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
export PATH="/opt/homebrew/opt/util-linux/bin:$PATH"
export PATH="/opt/homebrew/opt/util-linux/sbin:$PATH"

export BAT_CONFIG_PATH="$HOME/.bat.conf"

export STARSHIP_CACHE=~/.starship/cache

export PATH="/opt/homebrew/sbin:$PATH"
export HISTSIZE=1000000000
export SAVEHIST=$HISTSIZE
setopt EXTENDED_HISTORY

# ugly woraround to use pinned yq
export PATH="/opt/homebrew/opt/yq@3/bin:$PATH"

export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'


# for debugging of slow startup tines
zsh_time_startup() {
  shell=${1-$SHELL}
  for i in $(seq 1 10); do /usr/bin/time $shell -i -c exit; done
}

# use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
# shellcheck disable=SC1090
[[ -f ~/.localrc ]] && source ~/.localrc


# all of our zsh files
typeset -U config_files
config_files=($DOTFILES/*/*.zsh)

# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}; do
  source "$file"
done

# add antigen plugins
[[ -f "$HOME/.zsh_plugins.sh" ]] && source "$HOME/.zsh_plugins.sh"
# asdf
[[ -f $(brew --prefix asdf)/asdf.sh ]] && source $(brew --prefix asdf)/asdf.sh


autoload -Uz compinit bashcompinit
if [ $(date +'%j') != $(/usr/bin/stat -f '%Sm' -t '%j' ${ZDOTDIR:-$HOME}/.zcompdump) ]; then
	compinit
	bashcompinit
else
	compinit -C
	bashcompinit -C
fi

# Execute code in the background to not affect the current session
{
	# Compile zcompdump, if modified, to increase startup speed.
	zcompdump="${ZDOTDIR:-$HOME}/.zcompdump"
	if [[ -s "$zcompdump" && (! -s "${zcompdump}.zwc" || "$zcompdump" -nt "${zcompdump}.zwc") ]]; then
		zcompile "$zcompdump"
	fi
} &!

# load every completion after autocomplete loads
for completion in ${(M)config_files:#*/completion.zsh}; do
  source "$completion"
done

unset config_files updated_at

# ref: https://github.com/junegunn/fzf
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh


# you can also trigger by command **
# Use fd (https://github.com/sharkdp/fd) instead of the default find
# command for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
	fd --hidden --follow --exclude ".git" . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
	fd --type d --hidden --follow --exclude ".git" . "$1"
}
# ref https://github.com/junegunn/fzf/wiki/examples

# disable not found
unsetopt nomatch


# Fast workaround
export PATH="/Users/anden/.pyenv/shims:${PATH}"
# TODO offical install cost me 0.20 startup time
# offical python nightmare
# export PYENV_ROOT="$HOME/.pyenv"
# export PATH="$PYENV_ROOT/bin:$PATH"
# _evalcache pyenv init --path


# if command -v pyenv 1>/dev/null 2>&1; then
# 	_evalcache pyenv init -
# fi

# #desired_python_version="3.11.0"
# current_python_version="$(python --version | awk '{print $2}')"
# if [[ "$current_python_version" != "$desired_python_version" ]]; then
#  pyenv install "$desired_python_version"
#  pyenv global "$desired_python_version"
# fi
# offical python nightmare



_evalcache direnv hook zsh

# https://starship.rs/
_evalcache starship init zsh

